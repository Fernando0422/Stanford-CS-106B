Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Fundamentals of Recursion Warmup
------

Q1. Looking at a call stack listing in a debugger, what is the indication that the program being debugged uses recursion?
A1. TODO

Q2. Describe how the symptoms of infinite recursion differ from the symptoms of an infinite loop.
A2. TODO

Q3. What was the number of iterations of `recPower` did it take on your system to amount to a quarter second? Copy/paste the time results of the two time trial sequences running on that number of iterations.
A3. num = 100000000

    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =        4) completed in    1.618 secs
    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =        8) completed in    2.252 secs
    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =       16) completed in    2.735 secs
    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =       32) completed in    2.816 secs
    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =       64) completed in    3.667 secs
    Line 100 TIME_OPERATION manyPowerCalls(5, size) (size =      128) completed in    4.257 secs


Q4. Explain how the recursive structure of `recPower` results in a Big-O runtime of `O(logN)` relative to the size of its `exp` argument.
A4. TODO

Merge
-----

Q5. Include the data from your execution timing and explain how it supports your Big O prediction for `binaryMerge`.
A5. TODO

Q6. Include the data from your execution timing and explain how it supports your Big O prediction for `naiveMultiMerge`.
A6. TODO

Q7. Include the data from your execution timing and explain how it demonstrates `O(n log k)` runtime for `recMultiMerge`.
A7. TODO

Recursive Backtracking Warmup
-----------------------------

Q8. What is the value of `totalMoves` after stepping over the call to `moveTower` in `hanoiAnimation`?
A8. totalMoves = 0 int

Q9. What is the value of the `totalMoves` variable after stepping over the first recursive sub-call? (In other words, within `moveTower` just after stepping over the first recursive sub-call to `moveTower` inside the `else` statement.)
A9. total moves made 15

Q10. After breaking at the base case of `moveTower` and then choosing Step Out, where do you end up? (What function are you in, and at what line number?) What is the value of the `totalMoves` variable at this point?
A10. After choosing step out, I sitll remain in the same function and total moves is = 0

Q11. What is the smallest possible input that you used to trigger the bug in the program?
A11. The smallest input that triggered the bug was using an input of nothing.

Q12. Identify the one-character error in the code and explain why that one-character bug causes the function to return the output you see when running on the minimal input you listed above. You should be able to specifically account for how the error causes the result to change from “completely correct” to “terribly wrong.”
A12. The one character issue is the += in the recursive call. Using the += operator modifies the sumSoFar variable which affects subsequent calculations leading to an incorrect result.

Text Predict
------------

Q13. In your own words, identify the drawbacks to using global variables and explain why a program-wide constant like keypad does not suffer from the same drawbacks.
Q13. TODO
